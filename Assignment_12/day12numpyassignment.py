# -*- coding: utf-8 -*-
"""Day12NumpyAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rxo52oivkJiwPaUgma1ZJL6UmhDvDmZ2

Numpy assignments
1. Using numpy create a matrix of size 3 by 5. Create another matrix of 5 by 3
Perform following operations on the matrices
1. Display shape of both matrix
2. Find matrix multiplication
3. Create another matrix of size 3 by 5 using random numbers
4. And display addition subtraction and member wise multiplication
1. accept numbers from user and store it in a list1 and list2
then convert these list into ndarray
create list3 and list4 to store numbers
and convert it into ndarray
(list1 and list 2 in one array)
(list3 and list 4 in another array)
combine these 4 arrays into 2D arrays (use stack functions)

and find memberwise addition,multiplication
and exponential of first array
"""

import numpy as np

# Create matrices of size 3x5 and 5x3
A = np.zeros((3, 5))
B = np.zeros((5, 3))

# Display shape of both matrices
print("Shape of A:", A.shape)
print("Shape of B:", B.shape)

# Find matrix multiplication
C = np.dot(A, B)
print("Matrix multiplication:\n", C)

# Create another matrix of size 3x5 using random numbers
D = np.random.rand(3, 5)

# Display addition, subtraction, and member-wise multiplication
E = A + D
F = A - D
G = A * D
print("Addition:\n", E)
print("Subtraction:\n", F)
print("Member-wise multiplication:\n", G)

# Accept numbers from user and store it in lists
list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = [7, 8, 9]
list4 = [10, 11, 12]

# Convert lists to ndarrays
arr1 = np.array(list1)
arr2 = np.array(list2)
arr3 = np.array(list3)
arr4 = np.array(list4)

# Combine 4 arrays into 2D arrays using stack functions
arr5 = np.stack((arr1, arr2), axis=1)
arr6 = np.stack((arr3, arr4), axis=1)

# Find member-wise addition, multiplication, and exponential of first array
H = np.add(arr5, arr6)
I = np.multiply(arr5, arr6)
J = np.exp(arr5)
print("Member-wise addition:\n", H)
print("Member-wise multiplication:\n", I)
print("Exponential of first array:\n", J)

"""1. Store yearwise sales of 2 dealers for tv, freeze, mobiles, washing machines, AC and
dishwashers for years (2001 to 2010)
DEALER1
tv freeze mobiles washing machines AC dishwashers
(2001) 0 10000 2000 30000 4000 2000 3000
(2002) 1 10000 2000 30000 4000 2000 3000

Answer the following
a. Find total yearwise sales of tv,freeze,mobile,..... product for both dealer.
b. Find in each year total how many products are sold by dealer1 and how many
products are sold by dealer 2.
c. Display average sales of a 2005 year for each dealer.
d. Display max sales of a 2005 year for each dealer
e. Display sales of TV and freeze for each dealer.
f. Draw 2 bar chart one for each dealer, for each year total number of items sold in the
year
g. Draw a pie chart one for each dealer, for each year total number of items sold in the
year
"""

import pandas as pd
import matplotlib.pyplot as plt

# Create DataFrame for the sales data
data = {
    'Year': list(range(2001, 2003)),
    'Dealer': ['Dealer1', 'Dealer2'],
    'TV': [0, 1],
    'Freeze': [10000, 10000],
    'Mobiles': [30000, 30000],
    'Washing_Machines': [4000, 4000],
    'AC': [2000, 2000],
    'Dishwashers': [3000, 3000]
}

df_sales = pd.DataFrame(data)
df_sales.set_index(['Year', 'Dealer'], inplace=True)

# a. Total yearwise sales of each product for both dealers
total_sales = df_sales.groupby(level='Year').sum()

# Display total yearwise sales of each product for both dealers
print("a. Total Yearwise Sales of Each Product for Both Dealers:")
print(total_sales)
print()

# b. Total products sold by each dealer in each year
total_products_sold = df_sales.groupby('Year').count()

# Display total products sold by each dealer in each year
print("b. Total Products Sold by Each Dealer in Each Year:")
print(total_products_sold)
print()

# c. Display average sales of a 2005 year for each dealer
try:
    average_sales_2005 = df_sales.xs(2005).groupby('Dealer').mean()
    print("c. Average Sales of 2005 Year for Each Dealer:")
    print(average_sales_2005)
except KeyError:
    print("c. Average Sales of 2005 Year for Each Dealer: Data for 2005 is not available")
print()

# d. Display max sales of a 2005 year for each dealer
try:
    max_sales_2005 = df_sales.xs(2005).groupby('Dealer').max()
    print("d. Max Sales of 2005 Year for Each Dealer:")
    print(max_sales_2005)
except KeyError:
    print("d. Max Sales of 2005 Year for Each Dealer: Data for 2005 is not available")
print()

# e. Display sales of TV and freeze for each dealer
sales_TV_Freeze = df_sales[['TV', 'Freeze']]

# Display sales of TV and freeze for each dealer
print("e. Sales of TV and Freeze for Each Dealer:")
print(sales_TV_Freeze)
print()

# f. Draw bar chart for each dealer, for each year total number of items sold in the year
bar_chart_data = df_sales.unstack('Dealer')
bar_chart_data.plot(kind='bar', stacked=True)
plt.xlabel('Year')
plt.ylabel('Total Items Sold')
plt.title('Total Number of Items Sold in Each Year for Each Dealer')
plt.show()

# g. Draw pie chart for each dealer, for each year total number of items sold in the year
for dealer in df_sales.index.get_level_values('Dealer').unique():
    try:
        pie_chart_data = df_sales.loc(axis=0)[:, dealer].sum()
        pie_chart_data.plot(kind='pie', figsize=(8, 8))
        plt.title(f'Total Number of Items Sold in Each Year for {dealer}')
        plt.ylabel('')
        plt.show()
    except KeyError:
        print(f"Data for {dealer} is not available")