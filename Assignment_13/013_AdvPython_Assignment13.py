# -*- coding: utf-8 -*-
"""SeabornPlotAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fu9fbhD31qjGOP_rbydsWpUdPX-qZSiG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("interviewer_ratingSheet1.csv", index_col = "sr no.")
df

rank_df=df[['studentid','rating']].groupby('studentid').mean()
print(rank_df)

df1 = pd.read_csv("student.xlsx - Sheet1.csv",index_col='stuid')
df2 = pd.read_csv("student2.xlsx - Sheet1.csv",index_col='stuid',names=['stuid', 'name', 'marks'])
print(df1)
print(df2)

# Merge 2 dataframes
df3=pd.concat([df1,df2])
df3.index.names = ['studentid']
df3

# Merge 2 dataframes
# 1. what is interviewer average rating of each student
rank_df=df[['studentid','rating']].groupby('studentid').mean()
df5=pd.concat([df3,rank_df],axis=1)
df5

#Technology Column:
# 2. add a new column by name technology and assign values based on following rules
# if the marks of students >80 and rating > 4 then
# allocate Python project
# if rating > 3 and marks > 90 then assign java project
# if rating>4  then assign python training
# otherwise assign java training

def myconvert(rating,marks):
    if rating>4 and marks>80 :
        return 'Python Project'
    elif rating>3 and marks>90:
        return 'Java Project'
    elif rating>4:
        return 'Python Training'
    else:
        return 'Java Training'
df5['technology'] = df5.apply(lambda row: myconvert(row['rating'], row['marks']), axis=1)
df5

#Location Column:
# 3. add a new column location and assign values based on following rules
# if student marks > 80 then location is pune:
#     <80 and > 70 then location is delhi
#     otherwise mumbai

def myconvert(marks):
    if marks>80 :
        return 'Pune'
    elif 70<=marks<=80:
        return 'Delhi'
    else:
        return 'Mumbai'
df5['location'] = df5['marks'].apply(myconvert)
df5

# . plot pie chart locationwise

import pandas as pd
s1=pd.read_csv("student.xlsx - Sheet1.csv")
s2=pd.read_csv("student2.xlsx - Sheet1.csv",header=None)
#assign same names to the column
s2.columns=s1.columns
rating=pd.read_csv("interviewer_ratingSheet1.csv")
#rating.drop("rating",axis=0)
rating=rating.iloc[:,1:]
students=pd.concat([s1,s2],ignore_index=True)


#what is average rating of each student
g=rating.groupby('studentid')
for sid,data in g:
    print("Student id : ",sid)
    print(data)
    print("*"*60)

rdata=g['rating'].mean()
print(rdata)
df1=pd.DataFrame(rdata)
mergedata=pd.merge(students,df1,left_on='stuid',right_on='studentid')

#if the marks of students >80 and rating > 4 then
#allocate Python project
#if rating > 3 and marks > 90 then assign java project
#if rating>4  then assign python training
#otherwise assign java training
def myfunction(information):
    print("details",information)
    if information[0]>80 and information[1]>4:
        return 'Python Project'
    elif information[0]>90 and information[1]>3:
        return 'Java Project'
    elif information[1]>4:
        return 'Python Training'
    else:
        return 'Java Training'

mergedata['technology']=mergedata[['marks','rating']].apply(myfunction,axis=1)



#if student marks > 80 then location is pune:
#    <80 and > 70 then location is delhi
#    otherwise mumbai
def assignlocation(mks):
    if mks>80:
        return 'Pune'
    elif mks>=70:
        return 'Delhi'
    else:
        return 'Mumbai'
mergedata['location']=mergedata['marks'].apply(assignlocation)



#display  pie chart for how many students are
#allocated to mumbai, pune location and delhi location
import matplotlib.pyplot as plt
result=mergedata['location'].value_counts()
print(result)
plt.pie(result.values,labels=result.index,colors=['c','b','g'],startangle=90,explode=(0,0,0.1))
plt.show()

#minimum, max average, marks for each technology
mergedata['techname']=mergedata['technology'].map(lambda x:x.split(" ")[0])
print(mergedata)

# 5. plot a bar chart technologywise
sns.countplot(x="technology",data=df5)

# Use pandas, numpy and matplotlib,seaborn
# 1. Use movies11.csv,movie12.csv,movie13.csv and rating11.csv file and solve following

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv("movies11.csv")
print(df1)

df2 = pd.read_csv("movie12.csv",header=None)
df2.columns = df1.columns
print(df2)

df3 = pd.read_csv("movies13.csv",header=None)
df3.columns = df1.columns
print(df3)

df4 = pd.read_csv("rating11.csv")
df4 = df4.sort_values('movieId',ignore_index=True)
df_ratings = df4
print(df_ratings)

dfs = [df1, df2, df3]
df_movies = pd.concat(dfs, ignore_index=True)
df_movies.index = df.index + 1
print(df_movies)

# 2. find all masala movie - (action ,romance,comedy,thriller)

genrelst = ["Action" , "Romance", "Comedy", "Thriller"]
S = set(genrelst)

# selecting rows based on condition
df['check'] = [bool(S.intersection(x.split('|'))) for x in df['genres']]
print(df)
rslt_df = df[df['check']==True]

# test["Check"] = [bool(S.intersection(x)) for x in test['allDx']]
# test["Check"] = [not S.isdisjoint(x) for x in test['allDx']] -> Faster

print('\nResult dataframe :\n',
      rslt_df)

# 3. plot a pie chart to represent genre and frequency of movie count

# #To create a new dataframe consisting of Genre and movie falling in that genres' count.
# genre_dict = {"Action" : 0 , "Romance": 0, "Comedy": 0, "Thriller" : 0}
# def assigngenre(genre):
#   for k in genre_dict.keys():
#     if k in genre.split('|'):
#         genre_dict[k] += 1



# Split the genres and explode them into separate rows
genres_split = rslt_df['genres'].str.split('|', expand=True).stack()

# Count the occurrences of each genre
genre_counts = genres_split.value_counts().reset_index()

# Rename the columns
genre_counts.columns = ['Genre', 'Count']

print(genre_counts)


import matplotlib.pyplot as plt

# Filter for the desired genres
desired_genres = ['Action', 'Comedy', 'Thriller', 'Romance']
filtered_genres = genre_counts[genre_counts['Genre'].isin(desired_genres)]

# Plotting
plt.figure(figsize=(8, 8))
plt.pie(filtered_genres['Count'], labels=filtered_genres['Genre'], autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# 4. find average rating for each movie then merge 2 frames, display movieid,name,rating
# Calculate average rating for each movie
average_ratings = df_ratings.groupby('movieId')['rating'].mean().reset_index()

# Merge the movie data with average ratings
merged_df = pd.merge(df_movies, average_ratings, on='movieId', how='inner')

# Display movie ID, name, and average rating
print(merged_df[['movieId', 'title', 'rating']])

# 5. draw pie chart for each genre and average rating

# Calculate average rating for each genre
genre_avg_ratings = merged_df.groupby('genres')['rating'].mean().reset_index()

# Plot pie chart for each genre
for index, row in genre_avg_ratings.iterrows():
    plt.figure(figsize=(8, 8))
    plt.pie([row['rating'], 5 - row['rating']], labels=['Average Rating', ''], autopct='%1.1f%%', startangle=140)
    plt.title('Average Rating for ' + row['genres'])
    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.show()

# 6. draw bar graph for each rating and number of movies

rating_counts = df_ratings['rating'].value_counts().sort_index()

# Plot bar graph
plt.bar(rating_counts.index, rating_counts.values)
plt.xlabel('Rating')
plt.ylabel('Number of Movies')
plt.title('Number of Movies for Each Rating')
plt.xticks(rating_counts.index)
plt.show()